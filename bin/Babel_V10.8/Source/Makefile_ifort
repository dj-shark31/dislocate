# Personnalize the variable BIN, as well as the variable LIBLOC
# if you want to use a Blas/Lapack library which has been already installed on your computer.
# If you do not define variable LIBLOC the needed subroutines from Blas and 
# Lapack library will be compiled.
# Use make to compile the program
#     make install to compile the program and install some tools from Utils directory. 
#     make clean to remove object files
#     make distclean / make veryclean to remove object files in the current and in the library directory

BIN = ../bin
MODULES = ./Modules

# Intel fortran compiler
F90 = ifort
# Debugging on Linux (ifort)
#F90FLAGS = -O0 -fpe0 -CB -check all -e95 -std95 -traceback -warn all -module $(MODULES) 
#F90FLAGS = -O0 -fpe0 -CB -e95 -std95 -traceback -warn all -module $(MODULES) 
#F90FLAGS = -O0 -fpe0 -CB -traceback -warn all -module $(MODULES) 
# Optimizing on Linux (ifort)
#  Do not use option -axN
F90FLAGS = -O3 -ip -module $(MODULES)
F77 = $(F90)
F77FLAGS = $(F90FLAGS)

#############################
# Lapack and Blas LIBRARIES #
#############################
# You can use variable LIBLOC to specify Lapack and Blas libraries
# If you do not define variable LIBLOC, the program will compile its own library
#
# MKL Libraries
#LIBLOC = -L/opt/intel/mkl/lib/32/ -lmkl_core -lmkl_intel -lmkl_intel_thread
# Libraries on srmp42
#LIBLOC = -llapack_ifort -lblas_ifort
# Libraries on srmp18
#LIBLOC = -llapack -lblas -lg2c
# Libraries on srmp66
#LIBLOC = /usr/local/lib/liblapack.a /usr/local/lib/libblas.a


### End of options #########################################################

ifdef LIBLOC
	DEPENDENCIES = 
else
	DEPENDENCIES = LibLapack/libLapack.a LibBlas/libBlas.a
	LIBLOC = 
endif

STRUCTDIR = ./LibStruct
LIBSTRUCT = $(STRUCTDIR)/libStruct.a
MODSTRUCT = $(STRUCTDIR)/Modules

XMLDIR = ./LibXml/src
LIBXML = $(XMLDIR)/libXmlParse.a
MODXML = $(XMLDIR)/Modules

##################################
LD = $(F90)
LDFLAGS = $(F90FLAGS)
export F90
export F90FLAGS
export F77
export F77FLAGS

##################################
.PHONY: force_look
.PRECIOUS: libBabel.a
.SUFFIXES: .f .f90 .o .a

.f.o:
	$(F77) $(F77FLAGS) -c $<

.f.a:
	$(F77) $(F77FLAGS) -c $<
	ar Urv $@ $%
	@rm -f $%

.f90.o:
	$(F90) $(F90FLAGS) -I $(MODULES) -I $(MODSTRUCT) -I $(MODXML) -c $<

.f90.a:
	$(F90) $(F90FLAGS) -I $(MODULES) -I $(MODSTRUCT) -I $(MODXML) -c $<
	ar Urv $@ $%
	@rm -f $%

all:	$(BIN) babel vitekFit displacementFit patternDetect patternInit displacement prepareDrag DOC
install: all utils
babel:	$(BIN)/babel
vitekFit:	$(BIN)/vitekFit
displacementFit:	$(BIN)/displacementFit
displacement:	$(BIN)/displacement
patternDetect:	$(BIN)/patternDetect
patternInit:	$(BIN)/patternInit
prepareDrag:	$(BIN)/prepareDrag


$(BIN):
	@mkdir $(BIN)

utils:
	@( ./export_utils $(BIN) )

clean:
	@rm -f *.o *.il *.mod $(MODULES)/*.mod lib*.a

veryclean: distclean
distclean: clean
	@(cd LibBlas && $(MAKE) clean)
	@(cd LibLapack && $(MAKE) clean)
	@(cd $(STRUCTDIR)  && $(MAKE) clean)
	@(cd $(XMLDIR)  && $(MAKE) clean)
	@(cd Doc && $(MAKE) clean)

$(BIN)/babel:	$(DEPENDENCIES) $(LIBXML) $(LIBSTRUCT) libBabel.a mainBabel.o
	$(LD) $(LDFLAGS) -o $(BIN)/babel mainBabel.o libBabel.a $(LIBSTRUCT) $(LIBXML) $(DEPENDENCIES) $(LIBLOC)

$(BIN)/vitekFit:	$(DEPENDENCIES) $(LIBXML) $(LIBSTRUCT) libBabel.a libFit.a mainVitekFit.o
	$(LD) $(LDFLAGS) -o $(BIN)/vitekFit mainVitekFit.o libFit.a libBabel.a $(LIBSTRUCT) $(LIBXML) $(DEPENDENCIES) $(LIBLOC)

$(BIN)/displacementFit:	$(DEPENDENCIES) $(LIBXML) $(LIBSTRUCT) libBabel.a libFit.a mainDisplacementFit.o
	$(LD) $(LDFLAGS) -o $(BIN)/displacementFit mainDisplacementFit.o libFit.a libBabel.a $(LIBSTRUCT) $(LIBXML) $(DEPENDENCIES) $(LIBLOC)

$(BIN)/displacement:	$(DEPENDENCIES) $(LIBXML) $(LIBSTRUCT) libBabel.a libDisplacement.a mainDisplacement.o
	$(LD) $(LDFLAGS) -o $(BIN)/displacement mainDisplacement.o libDisplacement.a libBabel.a $(LIBSTRUCT) $(LIBXML) $(DEPENDENCIES) $(LIBLOC)

$(BIN)/patternDetect:	$(DEPENDENCIES) $(LIBXML) $(LIBSTRUCT) libBabel.a libDisplacement.a mainPatternDetect.o
	$(LD) $(LDFLAGS) -o $(BIN)/patternDetect mainPatternDetect.o libDisplacement.a libBabel.a $(LIBSTRUCT) $(LIBXML) $(DEPENDENCIES) $(LIBLOC)

$(BIN)/patternInit:	$(DEPENDENCIES) $(LIBXML) $(LIBSTRUCT) libBabel.a libDisplacement.a mainPatternInit.o
	$(LD) $(LDFLAGS) -o $(BIN)/patternInit mainPatternInit.o libDisplacement.a libBabel.a $(LIBSTRUCT) $(LIBXML) $(DEPENDENCIES) $(LIBLOC)

$(BIN)/prepareDrag:	$(DEPENDENCIES) $(LIBXML) $(LIBSTRUCT) libBabel.a mainPrepareDrag.o
	$(LD) $(LDFLAGS) -o $(BIN)/prepareDrag mainPrepareDrag.o libBabel.a $(LIBSTRUCT) $(LIBXML) $(DEPENDENCIES) $(LIBLOC)

libBabel.a: libBabel.a(data.o) \
		libBabel.a(version.o) \
		libBabel.a(math.o) \
		libBabel.a(string.o) \
		libBabel.a(xml.o) \
		libBabel.a(symmetryXml.o) \
		libBabel.a(elasticity_ani.o) \
		libBabel.a(elasticity_stroh.o) \
		libBabel.a(slab.o) \
		libBabel.a(elasticity_loops.o) \
		libBabel.a(loops.o) \
		libBabel.a(disloc_ani.o) \
		libBabel.a(disloDipole.o) \
		libBabel.a(lineForce_ani.o) \
		libBabel.a(lineCouple_ani.o) \
		libBabel.a(rearrange.o) \
		libBabel.a(neighbours.o) \
		libBabel.a(lecture_input.o) \
		libBabel.a(fitConstraint.o) \
		libBabel.a(fit.o) \
		libBabel.a(writeInput.o) \
		libBabel.a(lecture.o) \
		libBabel.a(lecture_drag.o) \
		libBabel.a(period.o) \
		libBabel.a(periodRelax.o) \
		libBabel.a(peachKoehler.o) \
		libBabel.a(energy.o) \
		libBabel.a(energy_dipole.o) \
		libBabel.a(volterra.o) \
		libBabel.a(euler.o) \
		libBabel.a(strain.o) \
		libBabel.a(core.o)

libFit.a: libBabel.a \
		libFit.a(powell.o) \
		libFit.a(fitVitek.o) \
		libFit.a(fitDisplacement.o)

libDisplacement.a: libBabel.a \
		libDisplacement.a(nyeTensor.o) \
		libDisplacement.a(gradDisplacement.o) \
		libDisplacement.a(gradElasticDisplacement.o) \
		libDisplacement.a(strainFromDisplacement.o) \
		libDisplacement.a(lecture_displacement.o) 

LibLapack/libLapack.a: force_look
	@(cd LibLapack && $(MAKE))

LibBlas/libBlas.a: force_look
	@(cd LibBlas && $(MAKE))

$(LIBSTRUCT): force_look
	(cd $(STRUCTDIR) && $(MAKE))

$(LIBXML): force_look
	(cd $(XMLDIR) && $(MAKE))

doc: DOC
DOC: force_look
	(cd Doc && $(MAKE))
